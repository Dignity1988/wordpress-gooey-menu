<?php/** * Church fuctions * *  */  /** * Church header logo and number based on default customizer function *  *  */ function childheme_customize_register( $wp_customize ) {       }function Church_theme_customizer( $wp_customize ) {//Phone number in header$wp_customize->add_setting( 'Church_phone_field_id', array(	'default' => '',	'type' => 'theme_mod',	'capability' => 'edit_theme_options',	'transport' => 'refresh',	'sanitize_callback' => 'esc_textarea',) );$wp_customize->add_control( 'Phone', array(    'type' => 'textarea',    'priority' => 10,    'section' => 'phone_number',    'label' => __( 'Phone', 'Church' ),    'description' => '',    'settings' => 'Church_phone_field_id',) );	// Highlight and link color    $wp_customize->add_setting( 'Church_link_color', array(        'default'           => '#ff0000',        'transport'         => 'postMessage',        'sanitize_callback' => 'sanitize_hex_color',    ) );     $wp_customize->add_control( new WP_Customize_Color_Control( $wp_customize, 'Church_link_color', array(        'label'	   => 'Link and Highlight Color',        'section'  => 'colors',        'settings' => 'Church_link_color',    ) ) );    // Logo upload    $wp_customize->add_section( 'Church_logo_section' , array(	    'title'       => __( 'Logo', 'Church' ),	    'priority'    => 30,	    'description' => 'Upload a logo to replace the default site name and description in the header',	) );	$wp_customize->add_setting( 'Church_logo', array(		'sanitize_callback' => 'esc_url_raw',	) );	$wp_customize->add_control( new WP_Customize_Image_Control( $wp_customize, 'Church_logo', array(		'label'    => __( 'logo', 'Church' ),		'section'  => 'Church_logo_section',		'settings' => 'Church_logo',	) ) );	 //Adding a section    $wp_customize->add_section(                        'phone_setting_section',                        array(                            'title' => 'Phone Settings',                            'description' => 'This section resposible for the phone number.',                            'priority' => 9999,                        )    );        //Add a setting    $wp_customize->add_setting(                    'show_phone_text'    );                    //Add a setting    $wp_customize->add_setting(                    'phone_text_textbox',                    array(                         'default' => 'Phone number goes here',                    )    );        //Add control     $wp_customize->add_control(                    'phone_text_textbox',                    array(                        'label' => 'Phone number in header',                        'section' => 'phone_setting_section',                        'type' => 'text',                    )    );	}	add_action('customize_register', 'Church_theme_customizer');/** *  !Breadcrumbs fuctions * */function Church_breadcrumbs() {     // $Homedispay = 0; // 1 - show breadcrumbs on the homepage, 0 - don't show      $delimiter = '<span class="delimeter">></span>'; // delimiter between crumbs      $home = __('Home', Twla); // text for the 'Home' link      $blogPage = __('Blog', Twla);      $before = '<span class="bf-breadcrumbs">'; // tag before the current crumb      $after = '</span>'; // tag after the current crumb            global $post;      $homeLink = home_url();      if (is_front_page()) {              //display no breadcrumbs      } else {        do_action('Church_before_breadcrumbs');                echo '<div class="breadcrumbs row">';        echo '<div id="breadcrumb">';        echo '<a href="' . $homeLink . '">' . $home . '</a> ' . $delimiter . ' ';              if ( is_category() ) {          $thisCat = get_category(get_query_var('cat'), false);          if ($thisCat->parent != 0) echo get_category_parents($thisCat->parent, TRUE, ' ' . $delimiter . ' ');          echo $before . 'Archive by category "' . single_cat_title('', false) . '"' . $after;              } elseif ( is_search() ) {          echo $before . 'Search results for "' . get_search_query() . '"' . $after;              } elseif ( is_day() ) {          echo '<a href="' . get_year_link(get_the_time('Y')) . '">' . get_the_time('Y') . '</a> ' . $delimiter . ' ';          echo '<a href="' . get_month_link(get_the_time('Y'),get_the_time('m')) . '">' . get_the_time('F') . '</a> ' . $delimiter . ' ';          echo $before . get_the_time('d') . $after;              } elseif ( is_month() ) {          echo '<a href="' . get_year_link(get_the_time('Y')) . '">' . get_the_time('Y') . '</a> ' . $delimiter . ' ';          echo $before . get_the_time('F') . $after;              } elseif ( is_year() ) {          echo $before . get_the_time('Y') . $after;                            } elseif ( !is_single() && !is_page() && get_post_type() != 'post' && !is_404() ) {          $post_type = get_post_type_object(get_post_type());          echo $before . $post_type->labels->singular_name . $after;              } elseif ( is_attachment() ) {          $parent = get_post($post->post_parent);          //$cat = get_the_category($parent->ID); $cat = $cat[0];          //echo get_category_parents($cat, TRUE, ' ' . $delimiter . ' ');          //echo '<a href="' . get_permalink($parent) . '">' . $parent->post_title . '</a>';          if ($showCurrent == 1) echo ' '  . $before . get_the_title() . $after;              } elseif ( is_page() && !$post->post_parent ) {    echo $before . get_the_title() . $after;              } elseif ( is_page() && $post->post_parent ) {          $parent_id  = $post->post_parent;          $breadcrumbs = array();          while ($parent_id) {            $page = get_page($parent_id);            $breadcrumbs[] = '<a href="' . get_permalink($page->ID) . '">' . get_the_title($page->ID) . '</a>';            $parent_id  = $page->post_parent;          }          $breadcrumbs = array_reverse($breadcrumbs);          for ($i = 0; $i < count($breadcrumbs); $i++) {            echo $breadcrumbs[$i];            if ($i != count($breadcrumbs)-1) echo ' ' . $delimiter . ' ';          }          if ( is_tag() ) {          echo $before . 'Posts tagged "' . single_tag_title('', false) . '"' . $after;              } elseif ( is_author() ) {           global $author;          $userdata = get_userdata($author);          echo $before . 'Articles posted by ' . $userdata->display_name . $after;              } elseif ( is_404() ) {          echo $before . 'Error 404' . $after;        }else{                        echo $blogPage;        }              if ( get_query_var('paged') ) {          if ( is_category() || is_day() || is_month() || is_year() || is_search() || is_tag() || is_author() ) echo ' (';          echo ' ('.__('Page') . ' ' . get_query_var('paged').')';          if ( is_category() || is_day() || is_month() || is_year() || is_search() || is_tag() || is_author() ) echo ')';        }                   }    }echo '</div>';echo '</div>';}/** *  !Share */ function Church_share() {print ('	<div class="social-icons">								<a href="#" class="fa fa-linkedin"></a>				<a href="http://twitter.com/intent/tweet?url=<?php urlencode(the_permalink()); ?>&text=<?php urlencode(the_title())?>" class="fa fa-twitter" ></a>				<a target="_blank" href="http://www.facebook.com/sharer.php?u= <?php the_permalink(); ?>&t=<?php the_title(); ?" class="fa fa-facebook"></a>		</div>');		}/** *  !Add images thumbnail size to posts  *//** *  !Enqueue scripts and styles. */ function Church_scripts_styles() {/** *  !font-awesome css */   wp_enqueue_style( 'font-awesome', get_stylesheet_directory_uri() . '/css/font-awesome.min.css' );/** *  !Foundation */ wp_enqueue_style( 'foundation', get_stylesheet_directory_uri() . '/css/foundation.min.css' ); wp_enqueue_style( 'foundation', get_stylesheet_directory_uri() . '/css/normalize.css' );/** *  !Theme register scripts  */ wp_register_script('foundation-mod', get_template_directory_uri() . '/js/vendor/modernizr.js', array( 'jquery' ), true ); wp_register_script('foundation-jquery', get_template_directory_uri() . '/js/vendor/jquery.js', array( 'jquery' ), true ); wp_register_script('foundation-main', get_template_directory_uri() . '/js/foundation.min.js', true );  wp_register_script('slick', get_template_directory_uri() . '/js/slick.min.js', array( 'jquery' ), 50 );  wp_register_script('church', get_template_directory_uri() . '/js/church.js', true );  wp_register_script('foundation-top-bar', get_template_directory_uri() . '/js/foundation/foundation.topbar.js', true );/** *  !Theme_enqueue_Scripts */  wp_enqueue_script('foundation-jquery', get_template_directory_uri() . '/js/vendor/jquery.js', array( 'jquery' ), true ); wp_enqueue_script('foundation-mod', get_template_directory_uri() . '/js/vendor/modernizr.js', array( 'jquery' ), true ); wp_enqueue_script('foundation-main', get_template_directory_uri() . '/js/foundation.min.js', true );  wp_enqueue_script('church', get_template_directory_uri() . '/js/church.js', true );  wp_enqueue_script('foundation-top-bar', get_template_directory_uri() . '/js/foundation/foundation.topbar.js', true );wp_enqueue_style( 'slick-slider', get_stylesheet_directory_uri() . '/css/slick.css' );wp_enqueue_style( 'slick-theme', get_stylesheet_directory_uri() . '/css/slick-theme.css' );wp_enqueue_script('church', get_template_directory_uri() . '/js/church.js', true );wp_enqueue_script('slick', get_template_directory_uri() . '/js/slick.min.js', true );wp_enqueue_script('init', get_template_directory_uri() . '/js/init.js', true );	if ( is_singular() && comments_open() && get_option( 'thread_comments' ) ) {		wp_enqueue_script( 'comment-reply' );	}/**/** *  !Menu scripts */wp_enqueue_script( 'Church-menu', get_template_directory_uri() . '/js/gooeymenu.js', array( 'jquery' ), true );/** *  !Load the main stylesheet. */wp_enqueue_style( 'Church-style', get_stylesheet_uri() );add_action( 'wp_register_scripts', 'Church_scripts_styles', 50 );}/* * *! Define images size using default WP support for posts */add_theme_support( 'post-thumbnails' );add_image_size( 'post-image',  708, 400, true );add_image_size( 'post-image-large',  708, 200, true );add_image_size( 'post-image-small',  330, 150, true );/* * *Slick */ /* * *Post excepet */function new_excerpt_more( $more ) {	return ' <a class="read-more" href="'. get_permalink( get_the_ID() ) . '">' . __('Read More', 'Church') . '</a>';}add_filter( 'excerpt_more', 'new_excerpt_more' );function church_post_thumbnail() {	if ( post_password_required() || is_attachment() || ! has_post_thumbnail() ) {		return;	}	if ( is_singular() ) :	?>	<div class="post-thumbnail">		<?php the_post_thumbnail(); ?>	</div>	<?php else : ?>	<div class="post-thumbnail">		<a href="<?php the_permalink(); ?>">		 <?php the_post_thumbnail(); ?>		</a>	</div>	<?php endif; // End is_singular()}function top_bar_area() {}add_action( 'wp_enqueue_scripts', 'Church_scripts_styles' );/** * Register widgetized area and update sidebar with default widgets. */function Church_widgets_init() {	register_sidebar( array(		'name'          => __( 'Main Sidebar', 'Church' ),		'id'            => 'sidebar-1',		'before_widget' => '<aside id="%1$s" class="widget %2$s">',		'after_widget'  => '</aside>',		'before_title'  => '<h3 class="widget-title">',		'after_title'   => '</h3>',	) );		register_sidebar( array(		'name'          => __( 'footer Widget Area', 'Church' ),		'id'            => 'sidebar-2',		'before_widget' => '<aside id="%1$s" class="widget %2$s">',		'after_widget'  => '</aside>',		'before_title'  => '<h3 class="widget-title">',		'after_title'   => '</h3>',	) );		register_sidebar( array(		'name'          => __( 'Copiright Footer Widget Area', 'Church' ),		'id'            => 'sidebar-3',		'before_widget' => '<aside id="%1$s" class="widget %2$s">',		'after_widget'  => '</aside>',		'before_title'  => '<h3 class="widget-title">',		'after_title'   => '</h3>',	) );}add_action( 'widgets_init', 'Church_widgets_init' );/** * Register new foundation classes with Walker. borrowed form Joints Theme. */// Borrowed from FoundationPressclass Top_Bar_Walker extends Walker_Nav_Menu {	function display_element( $element, &$children_elements, $max_depth, $depth = 0, $args, &$output ) {		$element->has_children = ! empty( $children_elements[ $element->ID ] );		$element->classes[] = ( $element->current || $element->current_item_ancestor ) ? 'active' : '';		$element->classes[] = ( $element->has_children && 1 !== $max_depth ) ? 'has-dropdown' : '';		parent::display_element( $element, $children_elements, $max_depth, $depth, $args, $output );	}	function start_el( &$output, $object, $depth = 0, $args = array(), $current_object_id = 0 ) {		$item_html = '';		parent::start_el( $item_html, $object, $depth, $args );		$output .= ( 0 == $depth ) ? '<li class="divider"></li>' : '';		$classes = empty( $object->classes ) ? array() : (array) $object->classes;		if ( in_array( 'label', $classes ) ) {			$output .= '<li class="divider"></li>';			$item_html = preg_replace( '/<a[^>]*>(.*)<\/a>/iU', '<label>$1</label>', $item_html );		}	if ( in_array( 'divider', $classes ) ) {		$item_html = preg_replace( '/<a[^>]*>( .* )<\/a>/iU', '', $item_html );	}		$output .= $item_html;	}	function start_lvl( &$output, $depth = 0, $args = array() ) {		$output .= "\n<ul class=\"sub-menu dropdown\">\n";	}}//Adds first and last classes to the first and last menu itemsfunction add_first_and_last($output) {	$output = preg_replace('/class="menu-item/', 'class="first', $output, 1);  return $output;}add_filter('wp_nav_menu', 'add_first_and_last');// Register menusregister_nav_menus(	array(		'main-nav' => __( 'The Main Menu', 'Church' ),   // Main nav in header		));// The Top Menufunction Church_top_nav() {	 wp_nav_menu(array(        'container' => false,                           // Remove nav container        'container_class' => '',                        // Class of container        'menu' => 'The Top Menu', 'Church',                                   // Menu name        'menu_class' => 'top-bar-menu',            // Adding custom nav class        'theme_location' => 'main-nav',                // Where it's located in the theme        'before' => '',                                 // Before each link <a>        'after' => '',                                  // After each link </a>        'link_before' => '',                            // Before each link text        'link_after' => '',                             // After each link text        'depth' => 5,                                   // Limit the depth of the nav        'fallback_cb' => false,                         // Fallback function (see below)        'walker' => new Top_Bar_Walker(),    ));	?><?php}// Following fuction are borrowed from Sela wordpress free template. Special thanks to Matt Mullenweg from Autommatic.com//if ( ! function_exists( 'church_entry_meta' ) ) :/** * Prints HTML with meta information for current post: categories, tags, permalink, author, and date. */function church_entry_meta() {	// Sticky	if ( is_sticky() && is_home() && ! is_paged() ) {		echo '<span class="featured-post">' . __( 'Featured', 'Church' ) . '</span>';	}	// Date	if ( ! is_sticky() ) {		church_entry_date();	}	// Comments	if ( ! is_single() && ! post_password_required() && ( comments_open() || get_comments_number() ) ) {		echo '<span class="comments-link">';		comments_popup_link( __( 'Leave a comment', 'church' ), __( '1 Comment', 'church' ), __( '% Comments', 'church' ) );		echo '</span>';	}	// Edit link	edit_post_link( __( 'Edit', 'Church' ), '<span class="edit-link">', '</span>' );}endif;if ( ! function_exists( 'church_entry_date' ) ) :/** * Returns HTML with time information for current post */function church_entry_date() {	$time_string = '<time class="entry-date published" datetime="%1$s">%2$s</time>';	if ( get_the_time( 'U' ) !== get_the_modified_time( 'U' ) ) {		$time_string .= '<time class="updated" datetime="%3$s">%4$s</time>';	}	$time_string = sprintf( $time_string,		esc_attr( get_the_date( 'c' ) ),		esc_html( get_the_date() ),		esc_attr( get_the_modified_date( 'c' ) ),		esc_html( get_the_modified_date() )	);	printf( '<span class="date"><a href="%1$s" title="%2$s" rel="bookmark">%3$s</a></span>',		esc_url( get_permalink() ),		esc_attr( sprintf( __( 'Permalink to %s', 'Churc' ), the_title_attribute( 'echo=0' ) ) ),		$time_string	);}endif;if ( ! function_exists( 'church_footer_entry_meta' ) ) :/** * Display category/tag/permalink when applicable */function church_footer_entry_meta() {	/* translators: used between list items, there is a space after the comma */	$category_list = get_the_category_list( __( ', ', 'sela' ) );	/* translators: used between list items, there is a space after the comma */	$tag_list = get_the_tag_list( '', ', ' );	if ( ! sela_categorized_blog() ) {		// This blog only has 1 category so we just need to worry about tags in the meta text		if ( '' != $tag_list ) {			$meta_text = __( 'Tagged: %2$s', 'Church' );		} else {			$meta_text = __( '<a href="%3$s" title="Permalink to %4$s" rel="bookmark">link to the post</a>.', 'Church' );		}	} else {		// But this blog has loads of categories so we should probably display them here		if ( '' != $tag_list ) {			$meta_text = __( 'Posted in: %1$s | Tagged: %2$s', 'sela' );		} else {			$meta_text = __( 'Posted in: %1$s', 'sela' );		}	} // end check for categories on this blog	printf(		$meta_text,		$category_list,		$tag_list,		esc_url( get_permalink() ),		the_title_attribute( 'echo=0' )	);}endif;function sela_categorized_blog() {	if ( false === ( $all_the_cool_cats = get_transient( 'sela_category_count' ) ) ) {		// Create an array of all the categories that are attached to posts		$all_the_cool_cats = get_categories( array(			'hide_empty' => 1,		) );		// Count the number of categories that are attached to the posts		$all_the_cool_cats = count( $all_the_cool_cats );		set_transient( 'sela_category_count', $all_the_cool_cats );	}	if ( '1' != $all_the_cool_cats ) {		// This blog has more than 1 category so sela_categorized_blog should return true		return true;	} else {		// This blog has only 1 category so sela_categorized_blog should return false		return false;	}}